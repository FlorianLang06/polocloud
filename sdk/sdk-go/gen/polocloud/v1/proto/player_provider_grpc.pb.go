// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: polocloud/v1/proto/player_provider.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayerController_FindAll_FullMethodName       = "/dev.httpmarco.polocloud.v1.proto.PlayerController/findAll"
	PlayerController_FindByName_FullMethodName    = "/dev.httpmarco.polocloud.v1.proto.PlayerController/findByName"
	PlayerController_FindByService_FullMethodName = "/dev.httpmarco.polocloud.v1.proto.PlayerController/findByService"
	PlayerController_PlayerCount_FullMethodName   = "/dev.httpmarco.polocloud.v1.proto.PlayerController/playerCount"
)

// PlayerControllerClient is the client API for PlayerController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerControllerClient interface {
	FindAll(ctx context.Context, in *PlayerFindRequest, opts ...grpc.CallOption) (*PlayerFindResponse, error)
	FindByName(ctx context.Context, in *PlayerFindByNameRequest, opts ...grpc.CallOption) (*PlayerFindResponse, error)
	FindByService(ctx context.Context, in *PlayerFindByServiceRequest, opts ...grpc.CallOption) (*PlayerFindResponse, error)
	PlayerCount(ctx context.Context, in *PlayerCountRequest, opts ...grpc.CallOption) (*PlayerCountResponse, error)
}

type playerControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerControllerClient(cc grpc.ClientConnInterface) PlayerControllerClient {
	return &playerControllerClient{cc}
}

func (c *playerControllerClient) FindAll(ctx context.Context, in *PlayerFindRequest, opts ...grpc.CallOption) (*PlayerFindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerFindResponse)
	err := c.cc.Invoke(ctx, PlayerController_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerControllerClient) FindByName(ctx context.Context, in *PlayerFindByNameRequest, opts ...grpc.CallOption) (*PlayerFindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerFindResponse)
	err := c.cc.Invoke(ctx, PlayerController_FindByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerControllerClient) FindByService(ctx context.Context, in *PlayerFindByServiceRequest, opts ...grpc.CallOption) (*PlayerFindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerFindResponse)
	err := c.cc.Invoke(ctx, PlayerController_FindByService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerControllerClient) PlayerCount(ctx context.Context, in *PlayerCountRequest, opts ...grpc.CallOption) (*PlayerCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerCountResponse)
	err := c.cc.Invoke(ctx, PlayerController_PlayerCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerControllerServer is the server API for PlayerController service.
// All implementations must embed UnimplementedPlayerControllerServer
// for forward compatibility.
type PlayerControllerServer interface {
	FindAll(context.Context, *PlayerFindRequest) (*PlayerFindResponse, error)
	FindByName(context.Context, *PlayerFindByNameRequest) (*PlayerFindResponse, error)
	FindByService(context.Context, *PlayerFindByServiceRequest) (*PlayerFindResponse, error)
	PlayerCount(context.Context, *PlayerCountRequest) (*PlayerCountResponse, error)
	mustEmbedUnimplementedPlayerControllerServer()
}

// UnimplementedPlayerControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerControllerServer struct{}

func (UnimplementedPlayerControllerServer) FindAll(context.Context, *PlayerFindRequest) (*PlayerFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedPlayerControllerServer) FindByName(context.Context, *PlayerFindByNameRequest) (*PlayerFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByName not implemented")
}
func (UnimplementedPlayerControllerServer) FindByService(context.Context, *PlayerFindByServiceRequest) (*PlayerFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByService not implemented")
}
func (UnimplementedPlayerControllerServer) PlayerCount(context.Context, *PlayerCountRequest) (*PlayerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerCount not implemented")
}
func (UnimplementedPlayerControllerServer) mustEmbedUnimplementedPlayerControllerServer() {}
func (UnimplementedPlayerControllerServer) testEmbeddedByValue()                          {}

// UnsafePlayerControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerControllerServer will
// result in compilation errors.
type UnsafePlayerControllerServer interface {
	mustEmbedUnimplementedPlayerControllerServer()
}

func RegisterPlayerControllerServer(s grpc.ServiceRegistrar, srv PlayerControllerServer) {
	// If the following call pancis, it indicates UnimplementedPlayerControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerController_ServiceDesc, srv)
}

func _PlayerController_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerControllerServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerController_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerControllerServer).FindAll(ctx, req.(*PlayerFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerController_FindByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerFindByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerControllerServer).FindByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerController_FindByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerControllerServer).FindByName(ctx, req.(*PlayerFindByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerController_FindByService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerFindByServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerControllerServer).FindByService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerController_FindByService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerControllerServer).FindByService(ctx, req.(*PlayerFindByServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerController_PlayerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerControllerServer).PlayerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerController_PlayerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerControllerServer).PlayerCount(ctx, req.(*PlayerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerController_ServiceDesc is the grpc.ServiceDesc for PlayerController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.httpmarco.polocloud.v1.proto.PlayerController",
	HandlerType: (*PlayerControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAll",
			Handler:    _PlayerController_FindAll_Handler,
		},
		{
			MethodName: "findByName",
			Handler:    _PlayerController_FindByName_Handler,
		},
		{
			MethodName: "findByService",
			Handler:    _PlayerController_FindByService_Handler,
		},
		{
			MethodName: "playerCount",
			Handler:    _PlayerController_PlayerCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polocloud/v1/proto/player_provider.proto",
}
