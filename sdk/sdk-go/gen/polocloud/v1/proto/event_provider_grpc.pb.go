// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: polocloud/v1/proto/event_provider.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventProvider_Subscribe_FullMethodName   = "/dev.httpmarco.polocloud.v1.proto.EventProvider/Subscribe"
	EventProvider_Call_FullMethodName        = "/dev.httpmarco.polocloud.v1.proto.EventProvider/Call"
	EventProvider_Unsubscribe_FullMethodName = "/dev.httpmarco.polocloud.v1.proto.EventProvider/Unsubscribe"
)

// EventProviderClient is the client API for EventProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventProviderClient interface {
	Subscribe(ctx context.Context, in *EventSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventContext], error)
	Call(ctx context.Context, in *EventContext, opts ...grpc.CallOption) (*CallEventResponse, error)
	Unsubscribe(ctx context.Context, in *EventSubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type eventProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewEventProviderClient(cc grpc.ClientConnInterface) EventProviderClient {
	return &eventProviderClient{cc}
}

func (c *eventProviderClient) Subscribe(ctx context.Context, in *EventSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventContext], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventProvider_ServiceDesc.Streams[0], EventProvider_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventSubscribeRequest, EventContext]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventProvider_SubscribeClient = grpc.ServerStreamingClient[EventContext]

func (c *eventProviderClient) Call(ctx context.Context, in *EventContext, opts ...grpc.CallOption) (*CallEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallEventResponse)
	err := c.cc.Invoke(ctx, EventProvider_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProviderClient) Unsubscribe(ctx context.Context, in *EventSubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, EventProvider_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventProviderServer is the server API for EventProvider service.
// All implementations must embed UnimplementedEventProviderServer
// for forward compatibility.
type EventProviderServer interface {
	Subscribe(*EventSubscribeRequest, grpc.ServerStreamingServer[EventContext]) error
	Call(context.Context, *EventContext) (*CallEventResponse, error)
	Unsubscribe(context.Context, *EventSubscribeRequest) (*UnsubscribeResponse, error)
	mustEmbedUnimplementedEventProviderServer()
}

// UnimplementedEventProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventProviderServer struct{}

func (UnimplementedEventProviderServer) Subscribe(*EventSubscribeRequest, grpc.ServerStreamingServer[EventContext]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventProviderServer) Call(context.Context, *EventContext) (*CallEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedEventProviderServer) Unsubscribe(context.Context, *EventSubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedEventProviderServer) mustEmbedUnimplementedEventProviderServer() {}
func (UnimplementedEventProviderServer) testEmbeddedByValue()                       {}

// UnsafeEventProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventProviderServer will
// result in compilation errors.
type UnsafeEventProviderServer interface {
	mustEmbedUnimplementedEventProviderServer()
}

func RegisterEventProviderServer(s grpc.ServiceRegistrar, srv EventProviderServer) {
	// If the following call pancis, it indicates UnimplementedEventProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventProvider_ServiceDesc, srv)
}

func _EventProvider_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProviderServer).Subscribe(m, &grpc.GenericServerStream[EventSubscribeRequest, EventContext]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventProvider_SubscribeServer = grpc.ServerStreamingServer[EventContext]

func _EventProvider_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProviderServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventProvider_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProviderServer).Call(ctx, req.(*EventContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProvider_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProviderServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventProvider_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProviderServer).Unsubscribe(ctx, req.(*EventSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventProvider_ServiceDesc is the grpc.ServiceDesc for EventProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.httpmarco.polocloud.v1.proto.EventProvider",
	HandlerType: (*EventProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _EventProvider_Call_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _EventProvider_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventProvider_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "polocloud/v1/proto/event_provider.proto",
}
