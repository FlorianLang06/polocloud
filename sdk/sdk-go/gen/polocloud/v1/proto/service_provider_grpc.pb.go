// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: polocloud/v1/proto/service_provider.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceController_Find_FullMethodName                  = "/dev.httpmarco.polocloud.v1.proto.ServiceController/find"
	ServiceController_Boot_FullMethodName                  = "/dev.httpmarco.polocloud.v1.proto.ServiceController/boot"
	ServiceController_BootWithConfiguration_FullMethodName = "/dev.httpmarco.polocloud.v1.proto.ServiceController/bootWithConfiguration"
	ServiceController_Shutdown_FullMethodName              = "/dev.httpmarco.polocloud.v1.proto.ServiceController/shutdown"
)

// ServiceControllerClient is the client API for ServiceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceControllerClient interface {
	Find(ctx context.Context, in *ServiceFindRequest, opts ...grpc.CallOption) (*ServiceFindResponse, error)
	Boot(ctx context.Context, in *ServiceBootRequest, opts ...grpc.CallOption) (*ServiceBootResponse, error)
	BootWithConfiguration(ctx context.Context, in *ServiceBootWithConfigurationRequest, opts ...grpc.CallOption) (*ServiceBootWithConfigurationResponse, error)
	Shutdown(ctx context.Context, in *ServiceShutdownRequest, opts ...grpc.CallOption) (*ServiceShutdownResponse, error)
}

type serviceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceControllerClient(cc grpc.ClientConnInterface) ServiceControllerClient {
	return &serviceControllerClient{cc}
}

func (c *serviceControllerClient) Find(ctx context.Context, in *ServiceFindRequest, opts ...grpc.CallOption) (*ServiceFindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceFindResponse)
	err := c.cc.Invoke(ctx, ServiceController_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) Boot(ctx context.Context, in *ServiceBootRequest, opts ...grpc.CallOption) (*ServiceBootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceBootResponse)
	err := c.cc.Invoke(ctx, ServiceController_Boot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) BootWithConfiguration(ctx context.Context, in *ServiceBootWithConfigurationRequest, opts ...grpc.CallOption) (*ServiceBootWithConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceBootWithConfigurationResponse)
	err := c.cc.Invoke(ctx, ServiceController_BootWithConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) Shutdown(ctx context.Context, in *ServiceShutdownRequest, opts ...grpc.CallOption) (*ServiceShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceShutdownResponse)
	err := c.cc.Invoke(ctx, ServiceController_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceControllerServer is the server API for ServiceController service.
// All implementations must embed UnimplementedServiceControllerServer
// for forward compatibility.
type ServiceControllerServer interface {
	Find(context.Context, *ServiceFindRequest) (*ServiceFindResponse, error)
	Boot(context.Context, *ServiceBootRequest) (*ServiceBootResponse, error)
	BootWithConfiguration(context.Context, *ServiceBootWithConfigurationRequest) (*ServiceBootWithConfigurationResponse, error)
	Shutdown(context.Context, *ServiceShutdownRequest) (*ServiceShutdownResponse, error)
	mustEmbedUnimplementedServiceControllerServer()
}

// UnimplementedServiceControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceControllerServer struct{}

func (UnimplementedServiceControllerServer) Find(context.Context, *ServiceFindRequest) (*ServiceFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedServiceControllerServer) Boot(context.Context, *ServiceBootRequest) (*ServiceBootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Boot not implemented")
}
func (UnimplementedServiceControllerServer) BootWithConfiguration(context.Context, *ServiceBootWithConfigurationRequest) (*ServiceBootWithConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootWithConfiguration not implemented")
}
func (UnimplementedServiceControllerServer) Shutdown(context.Context, *ServiceShutdownRequest) (*ServiceShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedServiceControllerServer) mustEmbedUnimplementedServiceControllerServer() {}
func (UnimplementedServiceControllerServer) testEmbeddedByValue()                           {}

// UnsafeServiceControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceControllerServer will
// result in compilation errors.
type UnsafeServiceControllerServer interface {
	mustEmbedUnimplementedServiceControllerServer()
}

func RegisterServiceControllerServer(s grpc.ServiceRegistrar, srv ServiceControllerServer) {
	// If the following call pancis, it indicates UnimplementedServiceControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceController_ServiceDesc, srv)
}

func _ServiceController_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Find(ctx, req.(*ServiceFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_Boot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Boot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Boot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Boot(ctx, req.(*ServiceBootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_BootWithConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceBootWithConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).BootWithConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_BootWithConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).BootWithConfiguration(ctx, req.(*ServiceBootWithConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Shutdown(ctx, req.(*ServiceShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceController_ServiceDesc is the grpc.ServiceDesc for ServiceController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.httpmarco.polocloud.v1.proto.ServiceController",
	HandlerType: (*ServiceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "find",
			Handler:    _ServiceController_Find_Handler,
		},
		{
			MethodName: "boot",
			Handler:    _ServiceController_Boot_Handler,
		},
		{
			MethodName: "bootWithConfiguration",
			Handler:    _ServiceController_BootWithConfiguration_Handler,
		},
		{
			MethodName: "shutdown",
			Handler:    _ServiceController_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polocloud/v1/proto/service_provider.proto",
}
